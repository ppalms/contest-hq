<div id="reschedule_modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
  <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
    <div class="mt-3 text-center">
      <h3 class="text-lg font-medium text-gray-900 mb-4">
        Reschedule <%= contest_entry.large_ensemble.name %>
      </h3>
      
      <div class="text-sm text-gray-600 mb-4">
        <p><strong>School:</strong> <%= contest_entry.large_ensemble.school.name %></p>
        <% if contest_entry.large_ensemble.performance_class.abbreviation.present? %>
          <p><strong>Class:</strong> <%= contest_entry.large_ensemble.performance_class.abbreviation %></p>
        <% end %>
      </div>

      <div class="text-sm text-gray-600 mb-4">
        <p><strong>Current Schedule:</strong></p>
        <% current_blocks.each do |block| %>
          <p><%= block.performance_phase&.name %> - <%= block.start_time.strftime("%a %-m/%d %l:%M %p") %></p>
        <% end %>
      </div>

      <% if errors.any? %>
        <div class="bg-red-50 border border-red-200 rounded-md p-3 mb-4">
          <div class="text-sm text-red-800">
            <% errors.each do |field, message| %>
              <p><%= message %></p>
            <% end %>
          </div>
        </div>
      <% end %>

      <%= form_with url: update_schedule_entry_path(schedule, contest_entry), 
                    method: :patch, 
                    local: false,
                    data: { turbo_frame: "_top" },
                    class: "space-y-4",
                    id: "reschedule_form" do |form| %>
        
        <div>
          <%= form.label :target_day_id, "Select Day:", class: "block text-sm font-medium text-gray-700" %>
          <%= form.select :target_day_id, 
                          options_from_collection_for_select(schedule_days, :id, 
                            ->(day) { day.schedule_date.strftime("%a %-m/%d") }, form_values[:target_day_id]),
                          {},
                          { class: "mt-1 block w-full border border-gray-300 rounded-md px-3 py-2", 
                            required: true,
                            data: { 
                              action: "change->reschedule#dayChanged",
                              schedule_id: schedule.id
                            } } %>
        </div>

        <div>
          <%= form.label :target_time_slot, "Select Time Slot:", class: "block text-sm font-medium text-gray-700" %>
          <%= form.select :target_time_slot, [], 
                          { prompt: "Choose a time slot" },
                          { class: "mt-1 block w-full border border-gray-300 rounded-md px-3 py-2", 
                            required: true,
                            disabled: form_values[:target_day_id].blank?,
                            value: form_values[:target_time_slot],
                            data: { 
                              action: "change->reschedule#timeSlotChanged",
                              selected_time_slot: form_values[:target_time_slot]
                            } } %>
        </div>

        <div id="existing_entry_info" class="hidden bg-blue-50 border border-blue-200 rounded-md p-3">
          <p class="text-sm font-medium text-blue-800">Entry at selected time slot:</p>
          <div id="existing_entry_details" class="text-sm text-blue-700 mt-1"></div>
        </div>

        <div id="reschedule_method_section" class="<%= errors[:reschedule_method].present? || form_values[:reschedule_method].present? ? '' : 'hidden' %>">
          <%= form.label :reschedule_method, "Reschedule Method:", class: "block text-sm font-medium text-gray-700" %>
          <div class="mt-2 space-y-2">
            <label class="flex items-center">
              <%= form.radio_button :reschedule_method, "swap", 
                                    { class: "mr-2", 
                                      checked: form_values[:reschedule_method] == "swap" } %>
              <span class="text-sm">Swap time slots with existing entry</span>
            </label>
            <label class="flex items-center">
              <%= form.radio_button :reschedule_method, "shift", 
                                    { class: "mr-2",
                                      checked: form_values[:reschedule_method] == "shift" } %>
              <span class="text-sm">Shift other entries to make room</span>
            </label>
          </div>
        </div>

        <div class="flex justify-between pt-4">
          <button type="button" 
                  onclick="document.getElementById('modal_container').innerHTML = ''" 
                  class="px-4 py-2 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400">
            Cancel
          </button>
          <%= form.submit "Reschedule", 
                          class: "px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700" %>
        </div>
      <% end %>
    </div>
  </div>
</div>

<script data-turbo-temporary="true">
  // Initialize reschedule modal functionality
  window.initRescheduleModal = function() {
    const daySelect = document.querySelector('#reschedule_form select[name="target_day_id"]');
    const timeSlotSelect = document.querySelector('#reschedule_form select[name="target_time_slot"]');
    const existingEntryInfo = document.getElementById('existing_entry_info');
    const rescheduleMethodSection = document.getElementById('reschedule_method_section');
    const swapRadio = document.querySelector('#reschedule_form input[value="swap"]');
    
    if (!daySelect || !timeSlotSelect) return;
    
    // Day change handler
    async function dayChanged(event) {
      const dayId = event.target.value;
      const scheduleId = event.target.dataset.scheduleId;
      const selectedTimeSlot = timeSlotSelect.dataset.selectedTimeSlot;
      
      // Reset time slot dropdown and hide sections
      timeSlotSelect.innerHTML = '<option value="">Choose a time slot</option>';
      timeSlotSelect.disabled = true;
      existingEntryInfo.classList.add('hidden');
      rescheduleMethodSection.classList.add('hidden');
      
      if (!dayId) return;
      
      try {
        const response = await fetch(`/schedules/${scheduleId}/day_time_slots/${dayId}`);
        const data = await response.json();
        
        // Populate time slot options
        data.time_slots.forEach(slot => {
          const option = document.createElement('option');
          option.value = slot.time_value;
          option.textContent = `${slot.display}${slot.available ? ' (Available)' : ' (Occupied)'}`;
          option.dataset.entry = slot.entry ? JSON.stringify(slot.entry) : '';
          option.dataset.available = slot.available;
          
          // Pre-select the time slot if it matches the preserved value
          if (selectedTimeSlot && slot.time_value === selectedTimeSlot) {
            option.selected = true;
          }
          
          timeSlotSelect.appendChild(option);
        });
        
        timeSlotSelect.disabled = false;
        
        // If a time slot was pre-selected, trigger the change event to show entry details
        if (selectedTimeSlot) {
          timeSlotSelect.dispatchEvent(new Event('change'));
        }
      } catch (error) {
        console.error('Error fetching time slots:', error);
      }
    }
    
    // Time slot change handler
    function timeSlotChanged(event) {
      const selectedOption = event.target.selectedOptions[0];
      const existingEntryDetails = document.getElementById('existing_entry_details');
      
      if (selectedOption && selectedOption.dataset.entry) {
        // Time slot is occupied - show entry details and reschedule method section
        const entry = JSON.parse(selectedOption.dataset.entry);
        existingEntryDetails.innerHTML = `
          <p><strong>${entry.name}</strong></p>
          <p>${entry.school}</p>
          ${entry.performance_class ? `<p>Class: ${entry.performance_class}</p>` : ''}
        `;
        existingEntryInfo.classList.remove('hidden');
        rescheduleMethodSection.classList.remove('hidden');
        
        // Set swap as default if no method is currently selected
        if (swapRadio && !document.querySelector('#reschedule_form input[name="reschedule_method"]:checked')) {
          swapRadio.checked = true;
        }
      } else {
        // Time slot is available - hide sections and clear reschedule method
        existingEntryInfo.classList.add('hidden');
        rescheduleMethodSection.classList.add('hidden');
        
        // Clear any selected reschedule method for available slots
        const checkedMethod = document.querySelector('#reschedule_form input[name="reschedule_method"]:checked');
        if (checkedMethod) {
          checkedMethod.checked = false;
        }
      }
    }
    
    // Remove any existing event listeners to prevent duplicates
    daySelect.removeEventListener('change', dayChanged);
    timeSlotSelect.removeEventListener('change', timeSlotChanged);
    
    // Add event listeners
    daySelect.addEventListener('change', dayChanged);
    timeSlotSelect.addEventListener('change', timeSlotChanged);
    
    // Auto-trigger day change if a day is pre-selected (form state preservation)
    if (daySelect.value) {
      dayChanged({ target: daySelect });
    }
  };
  
  // Initialize immediately
  window.initRescheduleModal();
</script>